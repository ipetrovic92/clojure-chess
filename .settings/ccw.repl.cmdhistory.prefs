cmdhistory=["(not-occupied? init-board \:a 1)" "(occupied? init-board \:a 1)" "(occupied? init-board \:a 0)" "(occupied? init-board \:a 3)" "(occupied? init-board \:a 7)" "(occupied? init-board \:h 7\\n           \\n           )" "x-max" "(empty-field-val)" "empty-field-val" "x-value" "(is-digit \\\\3)" "(is-digit? \\\\3)" "(is-digit? \\\\a)" "(is-str-num? \\"12 ddd\\")" "(is-str-num? \\"12 \\")" "(is-str-num? \\"12\\")" "(valid-x? \:a)" "(contains? [\:a \:b \:c \:d \:e \:f \:g \:h] \:a)" "(contains? [\:a \:b \:c \:d \:e \:f \:g \:h] \:c)" "(contains? [\:a \:b \:c \:d \:e \:f \:g \:h] \\"\:c\\")" "(contains? [\:a \:b \:c \:d \:e \:f \:g 1] 1)" "(contains? [\:a \:b \:c \:d \:e \:f \:g 1] \:g)" "(\:a [\:a \:b \:c \:d \:e \:f \:g 1])" "(get [\:a \:b \:c \:d \:e \:f \:g 1] 0)" "(\= (get [\:a \:b \:c \:d \:e \:f \:g 1] 0) \:a)" "(doc contains?)" "(doc some)" "(valid-x? \:a)" "(some \#(\:a) x-value)" "(some \#(\= % \:a) x-value)" "(some \#(\= % 1) x-value)" "(some \#(\= % \:e) x-value)" "(some \#(\= % \:i) x-value)" "(\= 1 \:i)" "(\= \:i 1)" "(valid-x? \:a)" "(valid-x? \:1)" "(valid-x? 1)" "(and (vlaid-x? 2))" "(and (valid-x? 2))" "(doc some)" "(some \#{\:a} x-value)" "(some \#{\:1} x-value)" "(valid-x? \:a)" "(valid-x? \:1)" "(nil? false)" "(nil? true)" "(complement nil?) (some \#(\= % \:a) x-value)" "((complement nil?) (some \#(\= % \:a) x-value))" "((complement nil?) (some \#(\= % \:1) x-value))" "(valid-x? \:a)" "(valid-x? \:1)" "(valid-x? \:a)" "(valid-x? \:1)" "(valid-x? \\"\\")" "(valid-y 9)" "(valid-y? 9)" "(valid-y? 7)" "(valid-y? 8)" "(valid-y? 0)" "(valid-y? 0.5)" "(valid-y? 7.1)" "(valid-y? 1)" "(valid-y? 0)" "(valid-y? 7)" "(valid-y? 6.9)" "(valid-y? 4)" "(instance? Integer 4)" "(instance? Integer 4.0)" "(instance? Int 4)" "(instance? Number 4)" "(instance? Number 4.4)" "(instance? Long 4.4)" "(instance? Long 4)" "(valid-y? 4)" "(valid-y? 0)" "(valid-y? 7)" "(valid-y? 6.1)" "(valid-xy? \:a 1)" "(valid-xy? \:a 8)" "(valid-xy? \:a 3)" "(zipmap x-value (range 8))" "(x-as-num \:a)" "(x-as-num \:g)" "(x-as-num \:h)" "(x-as-num \:i)" "(x-as-key 5)" "(x-as-key 7)" "(x-as-key 8)" "(in-ns 'clojure-chess.chessman)" "(get-chessman-short-name init-board \:a 1)" "(get-chessman-short-name init-board \:a 0)" "(get-chessman-short-name init-board \:a 7)" "(get-chessman-short-name init-board \:a 4)" "(get-chessman-short-name init-board \:a 9)" "(get-chessman-full-name init-board \:a 9)" "(get-chessman-full-name init-board \:a 8)" "(get-chessman-full-name init-board \:a 7)" "(get-chessman-full-name init-board \:a 3)" "(let [chessman-short-name (get (get-chessman-short-name init-board \:a 1) 1)] chessman-short-name)" "(let [chessman-short-name (get (get-chessman-short-name init-board \:a 3) 1)] chessman-short-name)" "(not-valid-xy? \:a 1)" "(not-valid-xy? \:a 9)" "(not-valid-xy? \:a 3)" "(not-valid-xy? \:a 7)" "(not-valid-xy? s 7)" "(not-valid-xy? \:y 7)" "(get-chessman-full-name init-board \:a 3)" "(get-chessman-full-name init-board \:a 7)" "(get-chessman-full-name init-board \:a 0)" "(get-chessman-full-name init-board \:h 3)" "(get-chessman-full-name init-board \:h 1)" "(get-chessman-full-name init-board \:h 0)" "(get-chessman-full-name init-board \:h 11)" "(get-chessman-color-short-name init-board \:h 1)" "(get-chessman-color-short-name init-board \:h 2)" "(get-chessman-color-short-name init-board \:h 4)" "(get-chessman-color-full-name init-board \:h 0)" "(get-chessman-color-full-name init-board \:a 1)" "(get-chessman-color-short-name chess-board \:a 0)" "(get-chessman-color-short-name init-board \:a 0)" "(get-chessman-color-short-name chess-board \:a 0)" "(get-chessman-color-full-name init-board \:a 1)" "(get-chessman-color-full-name init-board \:a 8)" "(get-chessman-color-full-name init-board \:a 7)" "(get-chessman-color-full-name init-board \:a 6)" "(white? init-board \:a 0)" "(white? init-board \:a 1)" "(white? init-board \:a 3)" "(white? init-board \:a 7)" "(black? init-board \:a 7)" "(black? init-board \:a 1)" "(same-color? init-board \:a 1 \:a 7)" "(same-color? init-board \:a 1 \:a 0)" "(set-chessman initboard \:a 4 \\"nesto\\")" "(set-chessman init-board \:a 4 \\"nesto\\")" "init-board" "(same-color? \:a 1 \:a 0\\n             )" "(same-color? init-board \:a 1 \:a 0\\n             )" "(white? init-board \:a 1)" "(white? init-board \:a 6)" "(white? init-board \:a 4\\n        )" "(color? \\\\b)" "(color? \\\\w)" "(color? \\\\a)" "chessmans" "(get chessmans \\\\p)" "(get chessmans \\\\v)" "(chessman? \\\\b)" "(chessman? \\\\s)" "(chessman? \\\\a)" "(chessman? \\\\p)" "(set-chessman init-board \:a 0 \\\\w \\\\p)" "(set-chessman init-board \:a 4 \\\\w \\\\p)" "(remove-chessman init-board \:a 1)" "(field-valid-for-move? init-board \:a 1 \:a 3)" "(field-valid-for-move? init-board \:a 1 \:a 7)" "(field-valid-for-move? init-board \:a 1 \:a 9)" "(field-valid-for-move? init-board \:a 2 \:a 3)" "(field-valid-for-move? init-board \:a 1 \:a 3)" "(field-valid-for-move? init-board \:a 1 \:a 1)" "(same-field? \:a 1 \:a 1)" "(same-field? \:a 1 \:a 2)" "(field-valid-for-move? init-board \:a 1 \:a 1)" "(field-valid-for-move? init-board \:a 1 \:a 2)" "(make-move init-board \:a 1 \:a 3)" "(make-move init-board \:a 1 \:a 0\\n           )" "(make-move init-board \:a 1 \:a 9\\n           )" "(+ 1 2)" "(make-move initboard \:a 1 \:a 2)" "(make-move init-board \:a 1 \:a 2)" "(remove-chessman init-board \:a 2)" "(remove-chessman init-board \:a 1)" "(is-chessman-type init-board \:a 1 \\\\p)" "(is-chessman-type? init-board \:a 1 \\\\p)" "(is-chessman-type? init-board \:a 1 \\\\r)" "(is-chessman-type? init-board \:a 1 e)" "(is-chessman-type? init-board \:a 1 \\\\e)" "(inc-x \:a)" "(inc-x \:c)" "(inc-x \:d)" "(inc-x \:f)" "(inc-x \:h)" "(dec-x \:h)" "(dec-x \:a)" "(dec-x \:b)" "(into {\:a 1 \:b 2} \:c 3)" "(into {\:a 1 \:b 2} (\:c 3))" "(assoc {\:a 1 \:b 2} \:c 3)" "(into [] 1)" "(into [] \:a)" "(into [] 1 2)" "(into [] \:a)" "(into [] 1)" "(doc into)" "(into [] (range 4 8))" "(into [] (range 8 4))" "(into [] (take-while () (lazy-seq))" "(doc lazy-seq)" "(lazy-seq (inc 1))" "(doc realize)" "(doc realized)" "(doc lazy-seq)" "(doc realized)" "(doc realized?)" "(into [] (map x-as-key (range 5 7))" "(into [] (map x-as-key [1 2 3 4])" "(x-as-key 1)" "(into [] (map x-as-key [1 2 3 4]))" "(into [] (map x-as-key (range 0 7\\n                              )))" "(partition '(1 2 3))" "(flatten '(1 2 3))" "(into [] (map x-as-key (range 0 7\\n                              )))" "(range nil 8)" "(range 8 8)" "(range 7 8)" "(get-rook-possible-x-moves 4)" "(map \#(conj vec %) [1 2 3])" "(map \#(conj [1 2 3] %) [1 2 3])" "(conj [] 1)" "(conj [] 1 2)" "(conj [] 1 2 3 4 5)" "(conj [ 1 2 3 ] 5)" "(conj '(1 2) 5)" "(conj '(1 2) 5 2)" "(conj '(1 2) (range 0 7))" "(conj '(1 2) (flatt (range 0 7)))" "(conj '() (flatten (range 0 7)))" "(map x-as-key (0 1 2))" "(map x-as-key '(0 1 2))" "(get-rook-possible-x-moves 4)" "(get-rook-possible-x-moves \:a)" "(get-rook-possible-x-moves \:b)" "(get-rook-possible-x-moves \:c)" "(range (if (nil? (inc-x \:c)) 8 (x-as-num (inc-x \:c))) 8)" "(reverse (range 0 (x-as-num \:c)))" "(into (reverse (range 0 (x-as-num \:c))) 8)" "(into (reverse (range 0 (x-as-num \:c))) (2 3))" "(into (reverse (range 0 (x-as-num \:c))) '(2 3))" "(reverse (range 0 (x-as-num \:c)))" "(get-rook-possible-x-moves \:c)" "(get-rook-possible-x-up-moves \:c)" "(get-rook-possible-x-up-moves \:a)" "(get-rook-possible-x-up-moves \:h)" "(get-rook-possible-x-down-moves \:h)" "(get-rook-possible-x-down-moves \:b)" "(get-rook-possible-x-down-moves \:a)" "(get-rook-possible-x-down-moves \:c)" "(get-rook-possible-right-moves 5)" "(get-rook-possible-left-moves 5)" "(map [inc dec] [1 2])" "(map [3 4] [1 2])" "[[2 (get-rook-possible-up-moves \:e)] [2 (get-rook-possible-down-moves \:e)]\\r\\n            [\:e (get-rook-possible-right-moves 2)] [\:e (get-rook-possible-left-moves 2)]]" "(map \#(% 2) '(\:a \:b \:c \:d))" "(map \#(hash-map % 2) '(\:a \:b \:c \:d))" "(map \#(assoc result % x) (range (if (nil? (inc-x x)) 8 (x-as-num (inc-x x))) 8))" "(map \#(assoc {} % \:g) (range (if (nil? (inc-x \:g)) 8 (x-as-num (inc-x \:g))) 8))" "(map \#(assoc {} (x-as-key %) 2) (range (if (nil? (inc-x \:b)) 8 (x-as-num (inc-x \:g))) 8))" "(map \#(assoc {} (x-as-key %) 2) (range (if (nil? (inc-x \:b)) 8 (x-as-num (inc-x \:b))) 8))" "(map \#(into {} (x-as-key %) 2) (range (if (nil? (inc-x \:b)) 8 (x-as-num (inc-x \:b))) 8))" "(reduce (fn [new-map key] (assoc new-map key 2)) {} [\:a \:b \:c])" "(range (if (nil? (inc-x \:c)) 8 (x-as-num (inc-x \:c))) 8)" "(map x-as-key (range (if (nil? (inc-x \:c)) 8 (x-as-num (inc-x \:c))) 8))" "(reduce (fn [new-map key] (asocc new-map key y)) {} '(\:a \:b \:c \:d))" "(reduce (fn [new-map key] (assocc new-map key y)) {} '(\:a \:b \:c \:d))" "(reduce (fn [new-map key] (assoc new-map key y)) {} '(\:a \:b \:c \:d))" "(reduce (fn [new-map key] (assoc new-map key 2)) {} '(\:a \:b \:c \:d))" "(get-rook-possible-up-moves \:b 3)" "(get-rook-possible-up-moves \:a 3)" "(get-rook-possible-up-moves \:h 3)" "(get-rook-possible-up-moves \:j 3)" "(get-rook-possible-down-moves \:e 3)" "(get-rook-possible-left-moves \:e 4)" "(range 0 3)" "(range 0 4)" "(get-rook-possible-left-moves \:e 4)" "(map \#(list \:a %) [1 2 3 4])" "(map \#(hash-map \:a %) [1 2 3 4])" "(get (get (map \#(hash-map \:a %) [1 2 3 4])0) 1)" "(get (map \#(hash-map \:a %) [1 2 3 4])0)" "(nth (map \#(hash-map \:a %) [1 2 3 4]) 0)" "(nth (map \#(hash-map \:a %) [1 2 3 4]) 1)" "(nth (map \#(hash-map \:a %) [1 2 3 4]) 2)" "(get-rook-possible-up-moves \:a 1)" "(get-rook-possible-up-moves \:h 1)" "(get-rook-possible-down-moves \:h 1)" "(get-rook-possible-up-moves \:a 1)" "(get-rook-possible-down-moves \:h 1)" "(get-rook-possible-up-moves \:a 1)" "(get-rook-possible-down-moves \:b 4)" "(get-rook-possible-left-moves \:a 6)" "(get-rook-possible-left-moves \:b 6)" "(get-rook-possible-left-moves \:e 6)" "(get-rook-possible-up-moves \:g 4)" "(get-rook-possible-down-moves \:g 4)" "(get-rook-possible-left-moves \:g 4)" "(get-rook-possible-right-moves \:g 4)" "get-rook-possible-up-moves" "(reduce \#() {\:move {}\\r\\n            \:eat {}} ({\:f 4}\\r\\n {\:e 4}\\r\\n {\:d 4}\\r\\n {\:c 4}\\r\\n {\:b 4}\\r\\n {\:a 4}))" "(get {\:a 1} 0)" "(nth {\:a 1} 0)" "(nth {\:a 1} \:a)" "(get {\:a 1} \:a)" "(first {\:a 1})" "(vals{\:a 1})" "(vals {\:a 1} 0)" "(get 0(vals {\:a 1}))" "(get (vals {\:a 1}) 0)" "(vec {\:a 1})" "(map->vec {\:a 1}" "(map->vec {\:a 1})" "(type {\:a 1})" "(instance? clojure.lang.PersistentArrayMap {})" "(instance? clojure.lang.PersistentArrayMap \#{})" "(map->vec {\:a 1})" "(get (map->vec {\:a 1}) 0)" "(get (map->vec {\:a 1}) 1)" "(get (map->vec {\:a 1}) 0)" "(get-rook-possible-up-moves \:a 3)" "(get (get-rook-possible-up-moves \:a 3) 1)" "(nth (get-rook-possible-up-moves \:a 3) 1)" "((fn [new-map]\\n   (map \#(let [key (get (str->vec) 0)\\n               val (get (str->vec) 1)] (cond\\n           ()\\n        \\n           ) '({\:a 5} {\:a 6} {\:a 7} {\:a 8})))){\:move {}\\r\\n            \:eat {}})" "(get (str->vec {\:a 1}) 0)" "(get (map->vec {\:a 1}) 0)" "(get (map->vec {\:a 1}) 1)" "((fn [new-map]\\n   (map \#(let [key (get (map->vec %) 0)\\n               val (get (map->vec %) 1)] \\n           (cond\\n           (true) (assoc-in new-map [\:eat] %)\\n           \:else new-map\\n        \\n           ) '({\:a 5} {\:a 6} {\:a 7} {\:a 8})))){\:move {}\\r\\n            \:eat {}})" "(assoc-in {\:move {}\\r\\n               \:eat {}} [\:eat] {\:a 3})" "(assoc-in {\:move {}\\r\\n               \:eat {}} [\:eat 0] {\:a 3})" "\=> (assoc-in {\:move {}\\r\\n                  \:eat []} [\:eat 0] {\:a 3})" "(assoc-in {\:move {}\\r\\n                  \:eat []} [\:eat 0] {\:a 3})" "(assoc-in {\:move {}\\r\\n                  \:eat []} [\:eat] {\:a 3})" "(assoc-in {\:move {}\\r\\n                  \:eat [{\:a 3}]} [\:eat 0] {\:a 4})" "(assoc-in {\:move {}\\r\\n                  \:eat [{\:a 3}]} [\:eat 1] {\:a 4})" "(assoc-in {\:move {}\\r\\n                  \:eat [{\:a 3}]} [\:eat] {\:a 4})" "(count (move {\:move [1 2 3 4]\\r\\n                     \:eat [{\:a 3}]}))" "(count (\:move {\:move [1 2 3 4]\\r\\n                     \:eat [{\:a 3}]}))" "\#(let [move-count (count (\:move {\:move [1 2 3 4]\\r\\n                        \:eat [{\:a 3}]}))\\r\\n                           eat-count (count (\:eat {\:move [1 2 3 4]\\r\\n                        \:eat [{\:a 3}]}))]\\r\\n                       (if (\= move-count 4)\\r\\n                         (println \\"ajde\\")\\r\\n                         (println \\"nece\\"))\\r\\n                       )" "(let [move-count (count (\:move {\:move [1 2 3 4]\\r\\n                        \:eat [{\:a 3}]}))\\r\\n                           eat-count (count (\:eat {\:move [1 2 3 4]\\r\\n                        \:eat [{\:a 3}]}))]\\r\\n                       (if (\= move-count 4)\\r\\n                         (println \\"ajde\\")\\r\\n                         (println \\"nece\\"))\\r\\n                       )" "(let [move-count (count (\:move {\:move [1 2 3 4]\\r\\n                        \:eat [{\:a 3}]}))\\r\\n                           eat-count (count (\:eat {\:move [1 2 3 4]\\r\\n                        \:eat [{\:a 3}]}))]\\r\\n                       (if (\= move-count 3)\\r\\n                         (println \\"ajde\\")\\r\\n                         (println \\"nece\\"))\\r\\n                       )" "(reduce \#(let [move-count (count (\:move new-map))\\r\\n                           eat-count (count (\:eat new-map))]\\r\\n                       (if (\= move-count 1)\\r\\n                         (println \\"ajde\\")\\r\\n                         (println \\"nece\\"))\\r\\n                       )\\r\\n                    {\:move [1 2 3 4]\\r\\n                           \:eat [{\:a 3}]} (get-rook-possible-up-moves \:a 2)\\r\\n             )" "(reduce \#(let [move-count (count (\:move {\:move [1 2 3 4]\\r\\n                           \:eat [{\:a 3}]}))\\r\\n                           eat-count (count (\:eat {\:move [1 2 3 4]\\r\\n                           \:eat [{\:a 3}]}))]\\r\\n                       (if (\= move-count 1)\\r\\n                         (println \\"ajde\\")\\r\\n                         (println \\"nece\\"))\\r\\n                       )\\r\\n                    {\:move [1 2 3 4]\\r\\n                           \:eat [{\:a 3}]} (get-rook-possible-up-moves \:a 2)\\r\\n             )" "(reduce \#(let [move-count (count (\:move {\:move [1 2 3 4]\\r\\n                           \:eat [{\:a 3}]}))\\r\\n                           eat-count (count (\:eat {\:move [1 2 3 4]\\r\\n                           \:eat [{\:a 3}]}))]\\r\\n                       (if (\= move-count 1)\\r\\n                         (println %)\\r\\n                         (println %))\\r\\n                       )\\r\\n                    {\:move [1 2 3 4]\\r\\n                           \:eat [{\:a 3}]} (get-rook-possible-up-moves \:a 2)\\r\\n             )" "(get-rook-possible-up-moves \:a 2)" "(reduce \#(let [move-count (count (\:move {\:move [1 2 3 4]\\r\\n                           \:eat [{\:a 3}]}))\\r\\n               eat-count (count (\:eat {\:move [1 2 3 4]\\r\\n                           \:eat [{\:a 3}]}))]\\r\\n                       (if (\= move-count 1)\\r\\n                         (println %)\\r\\n                         (println %))\\r\\n                       )\\r\\n                    {} '({\:a 3} {\:a 4} {\:a 5} {\:a 6} {\:a 7})\\r\\n             )" "(reduce \#(println %) {} '(1 2 3))" "(reduce \#( println %2)\\r\\n                    {} '({\:a 3} {\:a 4} {\:a 5} {\:a 6} {\:a 7})\\r\\n             )" "(reduce \#( println %1)\\r\\n                    {} '({\:a 3} {\:a 4} {\:a 5} {\:a 6} {\:a 7})\\r\\n             )" "(reduce \#(let [move-count (count (\:move {\:move [1 2 3 4]\\r\\n                           \:eat [{\:a 3}]}))\\r\\n               eat-count (count (\:eat {\:move [1 2 3 4]\\r\\n                           \:eat [{\:a 3}]}))]\\r\\n                       (if (\= move-count 1)\\r\\n                         (println %)\\r\\n                         (println %2))\\r\\n                       )\\r\\n                    {} '({\:a 3} {\:a 4} {\:a 5} {\:a 6} {\:a 7})\\r\\n             )" "(get-rook-possible-moves init-board \:a 0)" "(valid-xy? \:a 0)" "(occupied? init-board \:a 0)" "(is-chessman-type? init-board \:a 0)" "(is-chessman-type? init-board \:a 0 \\\\b)" "(is-chessman-type? init-board \:a 0 \\\\r)" "(reduce \#(let [move-count (count (\:move {\:move []\\r\\n            \:eat []}))\\r\\n                           eat-count (count (\:eat {\:move []\\r\\n            \:eat []}))]\\r\\n                       (if (\= move-count 1)\\r\\n                         (do(println \\"%1\\")\\r\\n                         (println \\"%2\\")))\\r\\n                       )\\r\\n                    {\:move []\\r\\n            \:eat []} (possible-moves-func \:a 0)\\r\\n             )" "(reduce \#(let [move-count (count (\:move {\:move []\\r\\n            \:eat []}))\\r\\n                           eat-count (count (\:eat {\:move []\\r\\n            \:eat []}))]\\r\\n                       (if (\= move-count 1)\\r\\n                         (do(println \\"%1\\")\\r\\n                         (println \\"%2\\")))\\r\\n                       )\\r\\n                    {\:move []\\r\\n            \:eat []} (get-rook-possible-up-moves \:a 0)\\r\\n             )" "(reduce \#(let [move-count (count (\:move {\:move []\\r\\n            \:eat []}))\\r\\n                           eat-count (count (\:eat {\:move []\\r\\n            \:eat []}))]\\r\\n                       (if (\= move-count 1)\\r\\n                         (do(println \\"%1\\")\\r\\n                         (println \\"%2\\")))\\r\\n                       )\\r\\n                    {\:move []\\r\\n            \:eat []} '(1 2 3 4)\\r\\n             )" "(reduce \#(let [move-count (count (\:move {\:move []\\r\\n            \:eat []}))\\r\\n                           eat-count (count (\:eat {\:move []\\r\\n            \:eat []}))]\\r\\n                       (if (\= move-count 0)\\r\\n                         (do(println \\"%1\\")\\r\\n                         (println \\"%2\\")))\\r\\n                       )\\r\\n                    {\:move []\\r\\n            \:eat []} '(1 2 3 4)\\r\\n             )" "(reduce \#(let [move-count (count (\:move {\:move []\\r\\n            \:eat []}))\\r\\n                           eat-count (count (\:eat {\:move []\\r\\n            \:eat []}))]\\r\\n                       (if (\= move-count 0)\\r\\n                         (do(println \\"%1\\")\\r\\n                         (println \\"%2\\")))\\r\\n                       )\\r\\n                 {} [1 2 3]\\r\\n             )" "(reduce \#(if (\= move-count 0)\\r\\n                         (do(println \\"%1\\")\\r\\n                         (println \\"%2\\"))\\r\\n                       )\\r\\n                 {} [1 2 3]\\r\\n             )" "(reduce \#(if (\= 0 0)\\r\\n                         (do(println \\"%1\\")\\r\\n                         (println \\"%2\\"))\\r\\n                       )\\r\\n                 {} [1 2 3]\\r\\n             )" "(reduce \#(if (\= 0 0)\\n           (do(println \\"%\\")\\n             (println \\"%\\"))\\r\\n                       )\\r\\n                 {} [1 2 3]\\r\\n             )" "(reduce \#(if (\= 0 0)\\n           (println \\"%\\")\\r\\n                       )\\r\\n                 {} [1 2 3]\\r\\n             )" "(reduce \#(if (\= 0 0)\\n           (println \\"%2\\")\\r\\n                       )\\r\\n                 {} [1 2 3]\\r\\n             )" "(reduce (fn\\n          [new-map-2 possible-move]\\r\\n                      (let [move-count (count (\:move new-map-2))\\r\\n                            eat-count (count (\:eat new-map-2))]\\r\\n                      (if (\= move-count 1)\\r\\n                        (do(println \\"%1\\")\\r\\n                        (println \\"%2\\")))\\r\\n                      ))\\r\\n                    {\:move []\\r\\n            \:eat []} (get-rook-possible-up-moves \:a 0)\\r\\n             )" "(reduce (fn\\n          [new-map-2 possible-move]\\r\\n                      (let [move-count (count (\:move new-map-2))\\r\\n                            eat-count (count (\:eat new-map-2))]\\r\\n                      (if (\= move-count 0)\\r\\n                        (do(println \\"%1\\")\\r\\n                        (println \\"%2\\")))\\r\\n                      ))\\r\\n                    {\:move []\\r\\n            \:eat []} (get-rook-possible-up-moves \:a 0)\\r\\n             )" "(reduce (fn\\n          [new-map-2 possible-move]\\r\\n                      (let [move-count (count (\:move new-map-2))\\r\\n                            eat-count (count (\:eat new-map-2))]\\r\\n                      (if (\= move-count 0)\\r\\n                        (println \\"%2\\"))\\r\\n                      ))\\r\\n                    {\:move []\\r\\n            \:eat []} (get-rook-possible-up-moves \:a 0)\\r\\n             )" "(get-rook-possible-moves init-board \:a 0)" "(get-rook-possible-moves init-board \:f 4)" "(get-rook-possible-moves (set-chessman init-board \:f 4 \\"wr\\") \:f 4)" "(get (map->vec {\:a 2}) 0)" "(assoc-in {\:move {}\\r\\n                  \:eat [{\:a 3}]} [\:eat 1] {\:a 4})" "(get-rook-possible-moves (set-chessman init-board \:f 4 \\"wr\\") \:f 4)" "(assoc-in new-map [\:move move-count] possible-move)" "(get-rook-possible-moves (set-chessman init-board \:f 4 \\"wr\\") \:f 4)" "(get-rook-possible-up-moves \:a 2)" "(take-while \#(let [key (get (map->vec possible-move) 0)\\r\\n                    val (get (map->vec possible-move) 1)]\\n               (not-occupied? init-board key val)\\n               ) (get-rook-possible-up-moves \:a 2))" "(take-while \#(let [key (get (map->vec %) 0)\\r\\n                    val (get (map->vec %) 1)]\\n               (not-occupied? init-board key val)\\n               ) (get-rook-possible-up-moves \:a 2))" "(take-while \#(let [key (get (map->vec %) 0)\\r\\n                    val (get (map->vec %) 1)]\\n               (do (println key)\\n                 (println val)\\n                 (not-occupied? init-board key val))\\n               ) (get-rook-possible-up-moves \:a 2))" "(take-while \#(\= 0 0) (get-rook-possible-up-moves \:a 2))" "(take-while \#(do (println %)(\= 0 0)) (get-rook-possible-up-moves \:a 2))" "(def nesto (take-while \#(do (println %)(\= 0 0)) (get-rook-possible-up-moves \:a 2)))" "nesto" "(take-while \#(let [key (get (map->vec %) 0)\\r\\n                    val (get (map->vec %) 1)]\\n               (do (println key)\\n                 (println val)\\n                 (println %)\\n                 (not-occupied? init-board key val))\\n               ) (get-rook-possible-up-moves \:a 2))" "(take-while \#(let [key (get (map->vec %) 0)\\r\\n                    val (get (map->vec %) 1)]\\n               (do (println key)\\n                 (println val)\\n                 (println (map->vec %))\\n                 (not-occupied? init-board key val))\\n               ) (get-rook-possible-up-moves \:a 2))" "(def nesto (take-while \#(do (println (map->vec %))(\= 0 0)) (get-rook-possible-up-moves \:a 2)))" "nesto" "(def nesto (take-while \#(do (println (type %))(\= 0 0)) (get-rook-possible-up-moves \:a 2)))" "nesto" "(def nesto (take-while \#(do (println (map->vec %))(\= 0 0)) (get-rook-possible-up-moves \:a 2)))" "nesto" "(take-while \#(let [key (get (map->vec %) 0)\\r\\n                    val (get (map->vec %) 1)]\\n               (do (println key)\\n                 (println val)\\n                 (println (map->vec %))\\n                 (not-occupied? init-board key val))\\n               ) (get-rook-possible-up-moves \:a 2))" "(take-while \#(let [key (get (map->vec %) 0)\\r\\n                    val (get (map->vec %) 1)]\\n               \\n                 (not-occupied? init-board key val))\\n               (get-rook-possible-up-moves \:a 2))" "(first '[])" "(first [])" "(assoc-in {\:move []\\r\\n             \:eat []} [\:move 0] [])" "(assoc-in {\:move []\\r\\n             \:eat []} [\:move 0] nil)" "(get nil 0)" "(get nil 1)" "(valid-xy? nil nil)" "(valid-xy? \:a 2)" "(first [])" "(count nil)" "(> nil 0)" "(> 1 0)" "(count nil)" "(get-rook-possible-moves (set-chessman init-board \:f 4 \\"wr\\") \:f 4)" "(get-rook-possible-moves (set-chessman init-board \:f 4 \\"wr\\") \:f 4 \\\\w)" "(take-while \#(let [key (get (map->vec %) 0)\\n                   val (get (map->vec %) 1)]\\r\\n             (not-occupied? init-board key val)) (get-rook-possible-up-moves \:a 3))" "(take-while \#(let [key (get (map->vec %) 0)\\n                   val (get (map->vec %) 1)]\\r\\n             (not-occupied? init-board key val)) (get-rook-possible-up-moves \:a 7))" "(take-while \#(let [key (get (map->vec %) 0)\\n                   val (get (map->vec %) 1)]\\r\\n             (not-occupied? init-board key val)) (get-rook-possible-up-moves \:a 6))" "(take-while \#(let [key (get (map->vec %) 0)\\n                   val (get (map->vec %) 1)]\\r\\n             (not-occupied? init-board key val)) (get-rook-possible-up-moves \:a 0))" "(take-while \#(let [key (get (map->vec %) 0)\\n                   val (get (map->vec %) 1)]\\r\\n             (not-occupied? init-board key val)) (get-rook-possible-up-moves \:a 1))" "(count (take-while \#(let [key (get (map->vec %) 0)\\r\\n                      val (get (map->vec %) 1)]\\r\\n                (not-occupied? init-board key val)) (get-rook-possible-up-moves \:a 1)))" "(first (drop 4 (get-rook-possible-up-moves \:a 1)))" "(get-rook-possible-moves (set-chessman init-board \:f 4 \\"wr\\") \:f 4)" "(> nil 0)" "(get-rook-possible-moves (set-chessman init-board \:f 4 \\"wr\\") \:f 4)" "(assoc-in {\:move []\\r\\n             \:eat []} [\:eat eats] ({\:f 5}))" "(assoc-in {\:move []\\r\\n             \:eat []} [\:eat 0] ({\:f 5}))" "(assoc-in {\:move []\\r\\n             \:eat []} [\:eat 0] [{\:f 5}])" "(assoc-in {\:move []\\r\\n             \:eat []} [\:eat 0] [{\:f 5} {\:f 3}])" "(assoc-in {\:move []\\r\\n             \:eat []} [\:eat] [{\:f 5} {\:f 3}])" "(assoc-in {\:move []\\r\\n             \:eat []} [\:eat0] [{\:f 5} {\:f 3}])" "(assoc-in {\:move []\\r\\n             \:eat []} [\:eat 0] [{\:f 5} {\:f 3}])" "(assoc-in {\:move [{\:a 1} {\:b 2}]\\r\\n             \:eat []} [\:move] (\:move {\:move [{\:a 1} {\:b 2}]\\r\\n             \:eat []}))" "(conj [9 0] [1 2 3]" "(conj [9 0] [1 2 3])" "(conj [9 0] (seq [1 2 3]))" "(flatten \\n  (conj [9 0] [1 2 3]))" "(flatten (conj [{\:a 1} {\:b 1}] [{\:c 1} {\:d 1} {\:e 1}]))" "(vec (flatten (conj [{\:a 1} {\:b 1}] [{\:c 1} {\:d 1} {\:e 1}])))" "(get-rook-possible-moves (set-chessman init-board \:f 4 \\"wr\\") \:f 4)" "(get-rook-possible-moves (set-chessman init-board \:f 4 \\"wr\\") \:f 4 \\\\w)" "(same-color? init-board \:a 1 \:a 0)" "(same-color? init-board \:a 1 \:a 6)" "(get-rook-possible-moves (set-chessman init-board \:f 4 \\"wr\\") \:f 4 \\\\w)" "(same-color? init-board \:a 1 \:a 0)" "(same-color? init-board \:a 1 \:a 6)" "(not-same-color? init-board \:a 1 \:a 6)" "(get-rook-possible-moves (set-chessman init-board \:f 4 \\"wr\\") \:f 4 \\\\w)" "(get-rook-possible-moves (set-chessman init-board \:f 4 \\"wr\\") \:f 4)" "(get-rook-possible-moves (set-chessman (set-chessman init-board \:e 4 \\"wr\\") \:f 4 \\"wr\\") \:f 4)" "(set-chessman (set-chessman init-board \:e 4 \\"wr\\") \:f 4 \\"wr\\")" "(set-chessman {\:a [\\"wr\\" \\"wp\\" \\"-\\" \\"-\\" \\"-\\" \\"-\\" \\"bp\\" \\"br\\"]\\r\\n   \:b [\\"wn\\" \\"wp\\" \\"-\\" \\"-\\" \\"-\\" \\"-\\" \\"bp\\" \\"bn\\"]\\r\\n   \:c [\\"wb\\" \\"wp\\" \\"-\\" \\"-\\" \\"-\\" \\"-\\" \\"bp\\" \\"bb\\"]\\r\\n   \:d [\\"wq\\" \\"wp\\" \\"-\\" \\"-\\" \\"-\\" \\"-\\" \\"bp\\" \\"bq\\"]\\r\\n   \:e [\\"wk\\" \\"-\\" \\"-\\" \\"-\\" \\"wp\\" \\"-\\" \\"bp\\" \\"bk\\"]\\r\\n   \:f [\\"wb\\" \\"wp\\" \\"-\\" \\"-\\" \\"wr\\" \\"-\\" \\"bp\\" \\"bb\\"]\\r\\n   \:g [\\"wn\\" \\"wp\\" \\"-\\" \\"-\\" \\"bp\\" \\"-\\" \\"-\\" \\"bn\\"]\\r\\n   \:h [\\"wr\\" \\"wp\\" \\"-\\" \\"-\\" \\"-\\" \\"-\\" \\"bp\\" \\"br\\"]\\r\\n   } \:f 4 \\"wr\\")" "(get-rook-possible-moves {\:a [\\"wr\\" \\"wp\\" \\"-\\" \\"-\\" \\"-\\" \\"-\\" \\"bp\\" \\"br\\"]\\r\\n   \:b [\\"wn\\" \\"wp\\" \\"-\\" \\"-\\" \\"-\\" \\"-\\" \\"bp\\" \\"bn\\"]\\r\\n   \:c [\\"wb\\" \\"wp\\" \\"-\\" \\"-\\" \\"-\\" \\"-\\" \\"bp\\" \\"bb\\"]\\r\\n   \:d [\\"wq\\" \\"wp\\" \\"-\\" \\"-\\" \\"-\\" \\"-\\" \\"bp\\" \\"bq\\"]\\r\\n   \:e [\\"wk\\" \\"-\\" \\"-\\" \\"-\\" \\"wp\\" \\"-\\" \\"bp\\" \\"bk\\"]\\r\\n   \:f [\\"wb\\" \\"wp\\" \\"-\\" \\"-\\" \\"wr\\" \\"-\\" \\"bp\\" \\"bb\\"]\\r\\n   \:g [\\"wn\\" \\"wp\\" \\"-\\" \\"-\\" \\"bp\\" \\"-\\" \\"-\\" \\"bn\\"]\\r\\n   \:h [\\"wr\\" \\"wp\\" \\"-\\" \\"-\\" \\"-\\" \\"-\\" \\"bp\\" \\"br\\"]\\r\\n   } \:f 4)" "(set-chessman init-board \:a 0)" "(get-rook-possible-moves init-board \:a 0)"]
eclipse.preferences.version=1
